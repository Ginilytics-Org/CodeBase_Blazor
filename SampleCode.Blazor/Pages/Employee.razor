@page "/employees"
@using SampleCode.Blazor.Interfaces
@inject IEmployeeService EmployeeService

<h3>Employee List</h3>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else if (!employees.Any())
{
    <p><em>No employees available.</em></p>
}
else
{
    <table class="table employee-table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Position</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.Position</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditEmployee(employee)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteEmployee(employee.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (isEditing || isAdding)
{
    <div class="form-container">
        <h4>@(isAdding ? "Add Employee" : "Edit Employee")</h4>
        <EditForm Model="currentEmployee" OnValidSubmit="SaveEmployee">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="firstName">First Name</label>
                <InputText id="firstName" class="form-control" @bind-Value="currentEmployee.FirstName" />
            </div>

            <div class="form-group">
                <label for="lastName">Last Name</label>
                <InputText id="lastName" class="form-control" @bind-Value="currentEmployee.LastName" />
            </div>

            <div class="form-group">
                <label for="position">Position</label>
                <InputText id="position" class="form-control" @bind-Value="currentEmployee.Position" />
            </div>

            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
        </EditForm>
    </div>
}

<button class="btn btn-success" @onclick="StartAddEmployee">Add New Employee</button>

@code {
    private List<Model.Employee> employees;
    private Model.Employee currentEmployee = new Model.Employee();
    private bool isEditing = false;
    private bool isAdding = false;

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetEmployeesAsync();
    }

    private void StartAddEmployee()
    {
        currentEmployee = new Model.Employee(); // Reset the form
        isAdding = true;
        isEditing = false;
    }

    private void EditEmployee(Model.Employee employee)
    {
        currentEmployee = new Model.Employee
            {
                Id = employee.Id,
                FirstName = employee.FirstName,
                LastName = employee.LastName,
                Position = employee.Position
            };
        isEditing = true;
        isAdding = false;
    }

    private async Task SaveEmployee()
    {
        if (currentEmployee.Id == 0)
        {
            // Add new employee
            await EmployeeService.AddEmployeeAsync(currentEmployee);
        }
        else
        {
            // Update existing employee
            await EmployeeService.UpdateEmployeeAsync(currentEmployee);
        }

        employees = await EmployeeService.GetEmployeesAsync(); // Refresh the list
        CancelEdit(); // Close the form
    }

    private void CancelEdit()
    {
        currentEmployee = new Model.Employee(); // Reset the form
        isEditing = false;
        isAdding = false;
    }

    private async Task DeleteEmployee(int id)
    {
        await EmployeeService.DeleteEmployeeAsync(id);
        employees = await EmployeeService.GetEmployeesAsync(); // Refresh the list
    }
}
